classdef printing < card

    properties

        Spectral_Min{mustBeNumeric, ...
                     mustBeGreaterThanOrEqual(Spectral_Min, 280), ...
                     mustBeLessThanOrEqual(Spectral_Min, 4000)};

        Spectral_Max{mustBeNumeric, ...
                     mustBeGreaterThanOrEqual(Spectral_Max, 280), ...
                     mustBeLessThanOrEqual(Spectral_Max, 4000)};

        Spectral_Step;
        total_outputs{mustBeNumeric, ...
                      mustBeGreaterThanOrEqual(total_outputs, 0), ...
                      mustBeLessThanOrEqual(total_outputs, 43)};
        outputs;

    end

    properties(Hidden=true)

        output_opts = { ...
            'Extraterrestrial spectrum, W * m^(-2)', ...
            'Direct normal irradiance, W * m^(-2)', ...
            'Diffuse horizontal irradiance, W * m^(-2)', ...
            'Global horizontal irradiance, W * m^(-2)', ...
            'Direct horizontal irradiance, W * m^(-2)', ...
            'Direct tilted irradiance, W * m^(-2)', ...
            'Diffuse tilted irradiance, W * m^(-2)', ...
            'Global tilted irradiance, W * m^(-2)', ...
            'Experimental direct normal irradiance (with circumsolar), W * m^(-2)', ...
            'Experimental diffuse horizontal irradiance, W * m^(-2)', ...
            'Circumsolar irradiance within radiometer field of view, W * m^(-2)', ...
            'Global tilted photon flux per wavelength, cm^(-2) * s^(-1) * nm^(-1)', ...
            'Direct normal photon flux per wavelength, cm^(-2) * s^(-1) * nm^(-1)', ...
            'Diffuse horizontal photon flux per wavelength, cm^(-2) * s^(-1) * nm^(-1)', ...
            'Rayleigh transmittance, —', ...
            'Ozone transmittance, —', ...
            'Transmittance from all trace gases, —', ...
            'Water vapor transmittance, —', ...
            'Mixed gas transmittance, —', ...
            'Aerosol transmittance, —', ...
            'Beam radiation transmittance, —', ...
            'Rayleigh optical thickness, —', ...
            'Ozone optical thickness, —', ...
            'Optical thickness from all trace gases, —', ...
            'Water vapor optical thickness, —', ...
            'Mixed gas optical thickness, —', ...
            'Aerosol optical thickness, —', ...
            'Aerosol single scattering albedo, —', ...
            'Aerosol asymmetry factor, —', ...
            'Zonal surface reflectance, —', ...
            'Local ground reflectance, —', ...
            'Atmospheric reflectance, —', ...
            'Global foreground reflected irradiance on tilted surface, W m^(-2)', ...
            'Upward hemispheric ground-reflected irradiance, W m^(-2)', ...
            'Global horizontal photosynthetic photon flux, µmol *  m^(-2) * s^(-1) *  nm^(-1)', ...
            'Direct normal photosynthetic photon flux, µmol *  m^(-2) * s^(-1) *  nm^(-1)', ...
            'Diffuse horizontal photosynthetic photon flux, µmol *  m^(-2) * s^(-1) *  nm^(-1)', ...
            'Global tilted photosynthetic photon flux, µmol *  m^(-2) * s^(-1) *  nm^(-1)', ...
            'Spectral photonic energy, eV', ...
            'Global horizontal photon flux per eV, cm^(-2) * s^(-1) * eV^(-1)', ...
            'Direct normal photon flux per eV, cm^(-2) * s^(-1) * eV^(-1)', ...
            'Diffuse horizontal photon flux per eV, cm^(-2) * s^(-1) * eV^(-1)', ...
            'Global tilted photon flux per eV, cm^(-2) * s^(-1) * eV^(-1)', ...
            };

    end

    methods

        function printing = printing(varargin)

            printing.card_type = 'IPRT';
            printing.card_num = 12;
            printing.groups = {{}, ...
                {'Spectral_Min', 'Spectral_Max', 'Spectral_Step'}, ...
                {{'total_outputs'}, {'outputs'}}, ...
                {...
                    {'Spectral_Min', 'Spectral_Max', 'Spectral_Step'}, ...
                    {'total_outputs'}, {'outputs'}}...
                };
            printing.suffix = {'', 'a', {'b', 'c'}, {'a', 'b', 'c'}};

            p = inputParser;
            addParameter(p, 'wpmn', 280); 
            addParameter(p, 'wpmx', 4000); 
            addParameter(p, 'intvl', 1);
            addParameter(p, 'output_options', []);
            
            parse(p, varargin{:});

            assert(p.Results.wpmn < p.Results.wpmx, ...
                   '"wpmn" must be <= "wpmx"');

            printing.Spectral_Min = p.Results.wpmn;
            printing.Spectral_Max = p.Results.wpmx;

            assert(p.Results.intvl > 0, '"intvl" must not be negative');

            printing.Spectral_Step = p.Results.intvl;

            printing.total_outputs = length(p.Results.output_options);

            assrt_err_str = [...
                'Error in "output_options"', newline, char(9), ...
                'Total number of items in "output_options" must be >= 0', ...
                newline, char(9), 'No item should be less than 1', ...
                newline, char(9), 'No item should be greater than 43'];

            isintegerarray = @(X) X == round(X);

            assert(0 <= sum(isintegerarray(p.Results.output_options) ...
                           & (p.Results.output_options <= 43) ...
                           & (p.Results.output_options >= 0)), assrt_err_str);

            if ~isnan([p.Results.wpmn, p.Results.wpmx, p.Results.intvl])
                printing.flag = 1;
                printing.Spectral_Min = p.Results.wpmn;
                printing.Spectral_Max = p.Results.wpmx;
                printing.Spectral_Step = p.Results.intvl;
            end

            printing.outputs = p.Results.output_options;
            printing.total_outputs = length(p.Results.output_options);

            if length(printing.output_opts) > 0
                printing.flag = printing.flag + 2;
            end

        end

        function show_options(printing)
            for i = 1 : length(printing.output_opts)
                disp([num2str(i), ':', char(9), printing.output_opts{i}]);
            end
        end

    end

end



