classdef parameters < dynamicprops

    properties
    end

    methods
        function obj = parameters()
            obj = aerosol_angstrom(obj);
        end
    end
end

function obj = aerosol_angstrom(obj)
    options = alloptions();
    n_opts = numel(options);
    for i = 1:n_opts
        opt = options{i};
        fields = fieldnames(opt);
        obj.addprop(fields{1});
        obj.(fields{1}) = opt.(fields{1});
    end
end

function name = fnname2optname()
    % Get the name of the function that calls fnname2optname() and remove the
    % last delimeted section. i.e. aerosol_angstrom_func becomes
    % aerosol_angstrom
    stack = dbstack(1);
    fnname = stack.name;
    splits = strsplit(fnname, '_');
    name = strjoin(splits(1:end-1), '_');
end

function s = variableSlots(slots, tags)
    s = struct;
    for i = 1:numel(slots)
        s.(slots{i}) = Variable(tags(i));
    end
end

function opt = aerosol_angstrom_func()
    name = fnname2optname();
    opt.(name) = variableSlots( ...
        {'alpha',         'beta'}, ...
        [TagEnum.IsValue, TagEnum.IsValue] ...
    );
end

function opt = aerosol_default_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsOnOff);
end

function opt = aerosol_file_func()
    name = fnname2optname();
    opt.(name).Type = Variable( ...
        TagEnum.IsOptionResult, ...
        value=OptionResult({'gg', 'ssa', 'tau', 'moments', 'explicit'}));
    opt.(name).File = Variable(TagEnum.IsFile);
end

function opt = aerosol_haze_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({ ...
        'Rural type aerosols', 'Maritime type aerosols',    ...
        'Urban type aerosols', 'Tropospheric type aerosols' }));
end

function opt = aerosol_king_byrne_func()
    opt.(fnname2optname()) = variableSlots( ...
        {'alpha_0',       'alpha_1',       'alpha_2'}, ...
        [TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = aerosol_profile_modtran_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsOnOff);
end

function opt = aerosol_season_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult(...
            {'Spring-summer profile', 'Fall-winter profile'}, ...
            Enumerate=true));
end

function opt = aerosol_set_tau_at_wvl_func()
    opt.(fnname2optname()) = variableSlots( ...
        {'lambda',        'tau'}, ...
        [TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = aerosol_species_file_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        value=OptionResult({ ...
            'continental_clean',    'continental_average', ...
            'continental_polluted', 'urban',               ...
            'maritime_clean',       'maritime_polluted',   ...
            'maritime_tropical',    'desert',              ...
            'antarctic'}));
end

function opt = aerosol_species_library_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult( ...
            {'INSO', 'WASO', 'SOOT', 'SSAM', 'SSCM', ...
             'MINM', 'MIAM', 'MICM', 'MITR', 'SUSO'}, ...
            Labels={ ...
            'insoluble',                 'water_soluble', ...
            'soot',                      'sea_salt_accumulation_mode', ...
            'sea_salt_coarse_mode',      'mineral_nucleation_mode', ...
            'mineral_accumulation_mode', 'mineral_coarse_mode', ...
            'mineral_transported',       'sulfate_droplets'}));
end

function opt = aerosol_visibility_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = aerosol_vulcan_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({...
            'Background aerosols',    'Moderate volcanic aerosols', ...
            'High volcanic aerosols', 'Extreme volcanic aerosols'}, ...
            enumerate=true));
end

function opt = albedo_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = albedo_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = albedo_library_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({...
            'evergreen_needle_forest', 'evergreen_broad_forest', ...
            'deciduous_needle_forest', 'deciduous_broad_forest', ...
            'mixed_forest',            'closed_shrub', ...
            'open_shrubs',             'woody_savanna', ...
            'savanna',                 'grassland', ...
            'wetland',                 'cropland', ...
            'urban',                   'crop_mosaic', ...
            'antarctic_snow',          'desert', ...
            'ocean_water',             'tundra', ...
            'fresh_snow'}));
end

function opt = altitude_func()
    opt.(fnname2optname()) = variableSlots( ...
        {'first',         'second'}, ...
        [TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = atm_z_grid_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = atmosphere_file_func()
    %1, Altitude above sea level in km,
    %2, Pressure in hPa,
    %3, Temperature in K,
    %4, air density in cm −3,
    %5, Ozone density in cm −3,
    %6, Oxygen density in cm −3,
    %7, Water vapour density in cm −3,
    %8, CO2 density in cm −3,
    %9, NO2 density in cm −3,
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({...
            'tropics',            'midlatitude_summer',
            'midlatitude_winter', 'subarctic_summer',
            'subarctic_winter',   'US-standard'}, ...
            Labels={
            'Tropical',           'Midlatitude Summer',
            'Midlatitude Winter', 'Subarctic Summer',
            'Subarctic Winter',   'U.S. Standard'}));
end

function opt = bpdf_tsant_u10_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = bdrf_ambrals_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'iso', 'vol', 'geo'}, HasValue=true));
end

function opt = bdrf_ambrals_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = brdf_ambrals_hotspot_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = brdf_cam_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'pcl', 'sal', 'u10', 'uphi', }, HasValue=true));
end

function opt = brdf_cam_solar_wind_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = brdf_hapke_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'w', 'B0', 'h'}, HasValue=true));
end

function opt = brdf_hapke_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = brdf_rpv_func()
    name = fnname2optname();
    opt.(name) = struct;
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult( ...
            {'k', 'rho0', 'theta', 'sigma', 't1', 't2', 'scale'}, ...
            HasValue=true));
end

function opt = brdf_rpv_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);;
end

function opt = brdf_rpv_library_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = brdf_rpv_type_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = ck_lowtran_absorption_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'O4', 'N2','CO','SO2','NH3','NO','HNO3'}));
end

function opt = cloud_fraction_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = cloud_overlap_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'rand', 'maxrand', 'max', 'off'}));
end

function opt = cloudcover_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'ic', 'wc'}, HasValue=true));
end

function opt = crs_file_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({...
            'O3',   'O2', 'H2O', 'CO2', 'NO2', 'BRO', 'OCLO', ...
            'HCHO', 'O4', 'SO2', 'CH4', 'N2O', 'CO',  'N2'}));
end

function opt = crs_model_func()
    name = fnname2optname();
    opt.(name) = variableSlots( ...
        {'rayleigh', 'o3', 'no2', 'o4'}, ...
        [TagEnum.IsOptionResult, TagEnum.IsOptionResult, ...
        TagEnum.IsOptionResult,  TagEnum.IsOptionResult ]);

    opt.(name).rayleigh.Value = OptionResult({ ...
        'Bodhaine', 'Bodhaine29', 'Nicolet', 'Penndorf'});

    opt.(name).o3.Value = OptionResult({ ...
        'Bass_and_Paur', 'Molina', 'Daumont', 'Bogumil', 'Serdyuchenko'});

    opt.(name).no2.Value = OptionResult({'Burrows', 'Bogumil', 'Vandaele'});

    opt.(name).o4.Value = OptionResult({'Greenblatt', 'Thalman'});
end

function opt = data_files_path_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = day_of_year_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = deltam_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsOnOff);
end

function opt = disort_intcor_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'phase', 'moments', 'off'}));
end

function opt = earth_radius_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = filter_function_file_func()
    opt.(fnname2optname()) = variableSlots( ...
        {'file', 'normalise'}, ...
        [TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = flourescence_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = flourescence_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = heating_rate_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({'layer_cd', 'local', 'layer_fd'}));
end

function opt = ic_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = ic_fu_func()
    opt.(fnname2optname()) = variableSlots( ...
        {'reff_def', 'deltascaling'}, ...
        [TagEnum.IsOnOff, TagEnum.IsOnOff]);
end

function opt = ic_habit_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        value=OptionResult({...
            'solid-column', 'hollow-column', 'rough-aggregate', ...
            'rosette-4',    'rosette-6',     'plate', ...
            'droxtal',      'dendrite',      'spheroid'}));
end

function opt = ic_habit_yang2013_func()
    name = fnname2optname();
    opt.(name) = variableSlots( ...
        {'type', 'roughness'}, ...
        [TagEnum.IsOptionResult, TagEnum.IsOptionResult]);
    opt.(name).type = OptionResult({...
        'column_8elements', 'droxtal',              'hollow_bullet_rosette', ...
        'hollow_column',    'plate',                'plate_10elements',      ...
        'plate_5elements',  'solid_bullet_rosette', 'solid_column'});
    opt.(name).roughness = OptionResult({'smooth', 'moderate', 'severe'});
end

function opt = ic_properties_func()
    opt.(fnname2optname()) = variableSlots({ ...
        'fu',       'echam4', 'key',      'yang',      'baum', ...
        'baum_v36', 'hey',    'yang2013', 'filename'}, ...
        [TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, ...
         TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, ...
         TagEnum.IsValue]);
end

function opt = include_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = interpret_as_level_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = isotropic_source_toa_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsCondition);
end

function opt = latitude_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsPosition);
end

function opt = longitude_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsPosition);
end

function opt = mc_azimuth_old_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsCondition);
end

function opt = mc_backward_func()
    % add option to variableSlots to allow for arrays?
    % refer to documentation for libRadtran for how this is defined, what kind
    % of token do we need to add to the parser?
    name = fnname2optname();
    opt.(name) = variableSlots( ...
        {'a', 'b', 'c'}, ...
        [TagEnum.IsCondition, TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = mc_backward_increment_func()
    opt.(fnname2optname()) = variableSlots( ...
        {'ix_step', 'iy_step'}, [TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = mc_backward_output_func()
    % extend parser to add units for abs, emis and heat
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        value=OptionResult({ ...
            'edir', 'edn',  'eup',   'exp', 'exn', 'eyp', 'eyn', 'act', ...
            'abs',  'emis', 'heat'}, ...
        label={...
            'direct horizontal irradiance', ...
            'diffuse downward irradiance (default)', ...
            'diffuse upward irradiance', ...
            'diffuse irradiance in positive x direction for grid box above specified altitude at the left (lower x) face', ...
            'diffuse irradiance in negative x direction for grid box above specified altitude at the left (lower x) face', ...
            'diffuse irradiance in positive y direction for grid box above specified altitude at the front (lower y) face', ...
            'diffuse irradiance in negative y direction for grid box above specified altitude at the front (lower y) face', ...
            'actinic flux', ...
            'absorption', ...
            'emission', ...
            'heating rates, that is absorption + emission'}));
end

function opt = mc_backward_writeback_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsCondition);
end

function opt = mc_basename_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFileName);
end

function opt = mc_boxairmass_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsCondition);
end

function opt = mc_escape_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsOnOff);
end

function opt = mc_forward_output_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        value=OptionResult({'absorption', 'actinic', 'emission', 'heating'}));
end

function opt = mc_maxscatters_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_minphotons_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_minscatters_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_nca_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsCondition);
end

function opt = mc_photons_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_photons_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = mc_polarisation_func()
    opt.(fnname2optname()) = Variable(...
        TagEnum.IsOptionResult, ...
        value=OptionResult({0, 1, 2, 3, -1, -2, -3, 4}, ...
        labels={...
            '(1,0,0,0) (default)', '(1,1,0,0)', '(1,0,1,0)', '(1,0,0,1)', ...
            '(1,-1,0,0)',          '(1,0,-1,0)', '(1,0,0,-1)', 'Random'}));
end

function opt = mc_rad_alpha_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_randomseed_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_sensordirection_func()
    opt.(fnname2optname()) = variableSlots({...
        'xvalue', 'yvalue', 'zvalue'}, ...
        [TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue]);
end

function opt = mc_spectral_is_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_spherical_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = mc_surface_reflectalways_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsCondition);
end

function opt = mc_vroom_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsOnOff);
end

function opt = mixing_ratio_func()
    opt.(fnname2optname()) = variableSlots({...
        'O2', 'H2O', 'CO2', 'NO2', 'CH4', 'N2O', 'F11', 'F12', 'F22'}, ...
        [TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, ...
         TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, TagEnum.IsValue, ...
         TagEnum.IsValue]);
end

function opt = mol_abs_param_func()
    name = fnname2optname();
    opt.(name) = Variable(...
        TagEnum.IsOptionResult, ...
        value=OptionResult({...
            'reptran',     'reptran_channel', 'crs',      'kato', ...
            'kato2',       'kato2andwandji',  'kato2_96', 'fu',   ...
            'avhrr_kratz', 'lowtran',         'sbdart'}));
    %opt.(name).reptran = OptionResult({'fine', 'medium', 'coarse'});
    %opt.(name).kato = Variable(TagEnum.IsCondition);
    %opt.(name).kato2 = Variable(TagEnum.IsCondition);
    %opt.(name).kato2andwandji = Variable(TagEnum.IsCondition);
    %opt.(name).kato2_96 = Variable(TagEnum.IsCondition);
    %opt.(name).fu = Variable(TagEnum.IsCondition);
    %opt.(name).avhrr_kratz = Variable(TagEnum.IsCondition);
    %opt.(name).lowtran = Variable(TagEnum.IsCondition);
    %opt.(name).sbdart = Variable(TagEnum.IsCondition);
end

function opt = mol_file_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = mol_modify_func()
    name = fnname2optname();
    opt.(name) = variableSlots( ...
        {'species', 'column', 'unit'}, ...
        [TagEnum.IsOptionResult, TagEnum.IsValue, TagEnum.IsOptionResult]);
    opt.(name).species.Value = OptionResult({...
        'O3',  'O2',  'H2O', 'CO2', 'NO2', 'BRO', 'OCLO', 'HCHO', 'O4', ...
        'SO2', 'CH4', 'N2O', 'CO',  'N2'});
    opt.(name).unit.Value = OptionResult({'DU', 'CM_2', 'MM'}, ...
        labels={'Dobson units', 'molecules/cm^2', 'kg/m^2'});
end

function opt = mol_tau_file_func()
    name = fnname2optname();
    opt.(name) = variableSlots( ...
        {'ScatteringOrAbsorption', 'filename'}, ...
        [TagEnum.IsOptionResult, TagEnum.IsFile]);
    opt.(name).ScatteringOrAbsorption.Value = OptionResult({'sca', 'abs'});
end

function opt = n02_column_du_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsObsolete);
end

function opt = n02_column_moleccm_2_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsObsolete);
end

function opt = no_absorption_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult( ...
            {'mol', 'aer', 'wc', 'ic', 'profile'}, ...
            Labels={ ...
            'Switch off molecular scattering', ...
            'Switch off scattering by aerosols', ...
            'Switch off scattering by water clouds', ...
            'Switch off scattering by ice clouds'}));
end

function opt = no_scattering_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult( ...
            {'mol', 'aer', 'wc', 'ic', 'profile'}, ...
            Labels={ ...
            'Switch off molecular scattering', ...
            'Switch off scattering by aerosols', ...
            'Switch off scattering by water clouds', ...
            'Switch off scattering by ice clouds'}));
end

function opt = number_of_streams_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsValue);
end

function opt = output_format_func()
    opt.(fnname2optname()) = Variable(TagEnum.IsFile);
end

function opt = output_process_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult( ...
            {'sum', 'integrate', 'per_nm', 'per_cm-1', 'per_band', 'none'}, ...
            labels = { ...
            'Sum output over wavelength. Useful in combination with the mol_abs_param option (kato, kato2, kato2.96, Fu, avhrr_kratz). In case of mol_abs_param reptran, the units are automatically converted to per_band before summation.', ...
            'Integrate output over wavelength for solar and over wavenumber for thermal simulations. Useful for spectral calculations, mol_abs_param lowtran and reptran.', ...
            'Output is given in W/(m 2 nm) or mW/(m 2 nm) (W or mW is determined by the extraterrestrial spectrum.)', ...
            'Output is given in W/(m 2 cm −1 ) or mW/(m 2 cm −1 ).', ...
            'Output is given in W/m 2 or mW/m 2 per correlated-k or reptran band. (This option can not be used for spectral calculations and mol_abs_param LOWTRAN in the solar range.)', ...
            'No processing - output spectral information (default)'}));
end

function opt = output_quantity_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult( ...
            {'brightness', 'reflectivity', 'transmittance'}, ...
            labels={ ...
            'Convert radiances / irradiances to equivalent brightness temperatures.', ...
            'Calculate transmission / reflectivity instead of absolute quantities. For irradiances / actinic fluxes the transmission T is defined as, T = E / (E_0 cosθ), where E is the irradiance / actinic flux, E_0 is the extraterrestrial flux, and θ is the solar zenith angle. The reflectivity R is defined as, R = (π · L) / (E_0 cosθ), where L is the radiance, E 0 is the extraterrestrial flux, and θ is the solar zenith angle. Obviously, reflectivities do not depend on Sun-Earth distance. Please note the difference to transmittance.', ...
            'Calculate transmittance / reflectance instead of absolute quantities. That is, set the extraterrestrial irradiance to 1 and do not correct for Sun-Earth distance, T = E / E_0, where E is the irradiance / actinic flux / radiance and E 0 is the extraterrestrial flux. Please note the difference to reflectivity.', ...
        }));
end

function opt = output_user_func()
    opt.(fnname2optname()) = Variable( ...
        TagEnum.IsOptionResult, ...
        Value=OptionResult({ ...
    'lambda',   'wavenumber', 'sza',     'zout',      'edir',     'eglo',     ...
    'edn',      'eup',        'enet',    'esum',      'uu',       'fdir',     ...
    'fglo',     'fdn',        'fup',     'f',         'uavgdir',  'uavgglo',  ...
    'uavgdn',   'uavgup',     'uavg',    'spher_alb', 'albedo',   'heat',     ...
    'p',        'T',          'T_d',     'T_sur',     'theta',    'theta_e',  ...
    'n_AIR',    'rho_AIR',    'mmr_AIR', 'vmr_AIR',   'n_O3',     'rho_O3',   ...
    'mmr_O3',   'vmr_O3',     'n_O2',    'rho_O2',    'mmr_O2',   'vmr_O2',   ...
    'n_H20',    'rho_H20',    'mmr_H20', 'vmr_H20',   'n_CO2',    'rho_CO2',  ...
    'mmr_CO2',  'vmr_CO2',    'n_NO2',   'rho_NO2',   'mmr_NO2',  'vmr_NO2',  ...
    'n_BRO',    'rho_BRO',    'mmr_BRO', 'vmr_BRO',   'n_OCLO',   'rho_OCLO', ...
    'mmr_OCLO', 'vmr_OCLO',   'n_HCHO',  'rho_HCHO',  'mmr_HCHO', 'vmr_HCHO', ...
    'n_O4',     'rho_O4',     'mmr_O4',  'vmr_O4',}, ...
        Labels={...
        'Wavelength in nm.', 'Wave number in cm −1 .', 'solar zenith angle', ...
        'Output altitude in km.', 'Direct irradiance', 'Global irradiance', ...
        'Diffuse downward irradiance', 'Diffuse upward irradiance', ...
        'Radiance uu(umu(0),phi(0))', 'Radiance uu(umu(0),phi(m))', ...
        'Radiance uu(umu(n),phi(0))', 'Radiance uu(umu(n),phi(m))', ...
        'Direct actinic flux', 'Global actinic flux', ...
        'Diffuse downward actinic flux', 'Diffuse upward actinic flux', ...
        'Total actinic flux', 'Direct mean intensity', ...
        'Global mean intensity', 'Diffuse downward mean intensity', ...
        'Diffuse upward mean intensity', ...
        'Total diffuse mean intensity (= actinic flux / 4π)', ...
        'Spherical albedo of the complete atmosphere.', ...
        'Albedo.', 'Heating rate in K/day.', 'pressure [hPa], ,', ...
        'temperature [K],', 'dewpoint temperature [K]', ...
        'surface temperature [K]', 'potential temperature [K]', ...
        'equivalent potential temperature [K]', ...
        'number density of the gas AIR [cm −3 ]', ...
        'mass density of the gas AIR [kg/m 3 ]', ...
        'mass mixing ratio of the gas AIR [kg/kg]', ...
        'volume mixing ratio of the gas AIR [m 3 /m 3 ]', ...
        'number density of the gas O3 [cm −3 ]', ...
        'mass density of the gas O3 [kg/m 3 ]', ...
        'mass mixing ratio of the gas O3 [kg/kg]', ...
        'volume mixing ratio of the gas O3 [m 3 /m 3 ]', ...
        'number density of the gas O2 [cm −3 ]', ...
        'mass density of the gas O2 [kg/m 3 ]', ...
        'mass mixing ratio of the gas O2 [kg/kg]', ...
        'volume mixing ratio of the gas O2 [m 3 /m 3 ]', ...
        'number density of the gas H20 [cm −3 ]', ...
        'mass density of the gas H20 [kg/m 3 ]', ...
        'mass mixing ratio of the gas H20 [kg/kg]', ...
        'volume mixing ratio of the gas H20 [m 3 /m 3 ]', ...
        'number density of the gas CO2 [cm −3 ]', ...
        'mass density of the gas CO2 [kg/m 3 ]', ...
        'mass mixing ratio of the gas CO2 [kg/kg]', ...
        'volume mixing ratio of the gas CO2 [m 3 /m 3 ]', ...
        'number density of the gas NO2 [cm −3 ]', ...
        'mass density of the gas NO2 [kg/m 3 ]', ...
        'mass mixing ratio of the gas NO2 [kg/kg]', ...
        'volume mixing ratio of the gas NO2 [m 3 /m 3 ]', ...
        'number density of the gas BRO [cm −3 ]', ...
        'mass density of the gas BRO [kg/m 3 ]', ...
        'mass mixing ratio of the gas BRO [kg/kg]', ...
        'volume mixing ratio of the gas BRO [m 3 /m 3 ]', ...
        'number density of the gas OCLO [cm −3 ]', ...
        'mass density of the gas OCLO [kg/m 3 ]', ...
        'mass mixing ratio of the gas OCLO [kg/kg]', ...
        'volume mixing ratio of the gas OCLO [m 3 /m 3 ]', ...
        'number density of the gas HCHO [cm −3 ]', ...
        'mass density of the gas HCHO [kg/m 3 ]', ...
        'mass mixing ratio of the gas HCHO [kg/kg]', ...
        'volume mixing ratio of the gas HCHO [m 3 /m 3 ]', ...
        'number density of the gas O4 [cm −3 ]', ...
        'mass density of the gas O4 [kg/m 3 ]', ...
        'mass mixing ratio of the gas O4 [kg/kg]', ...
        'volume mixing ratio of the gas O4 [m 3 /m 3 ]', ...
        'rh', 'rh_ice', 'c_p', 'CLWC', 'CLWD', 'CIWC', 'CIWD', 'TCC', ...
        'relative humidity over water [percent]', ...
        'relative humidity over ice [percent]', ...
        'specific heat capacity of the air (humidity and temperature dependent)', ...
        'cloud liquid water content [kg/kg]', ...
        'cloud liquid water density [g/m 3 ]', ...
        'cloud ice water content [kg/kg]', ...
        'cloud ice water density [g/m 3 ]', ...
        'total cloud cover [0-1]'}));
end

function options = alloptions()
    range = @(Start, Stop) linspace(Start, Stop, Stop);
    options = {...
        aerosol_angstrom_func(), ...
        aerosol_default_func(), ...
        aerosol_file_func(), ... % broken...
        aerosol_haze_func(), ...
        aerosol_king_byrne_func(), ...
        aerosol_profile_modtran_func(), ...
        aerosol_season_func(), ...
        aerosol_set_tau_at_wvl_func(), ...
        aerosol_species_file_func(), ...% this should be list [n]aero
        aerosol_species_library_func(), ...
        aerosol_visibility_func(), ...
        aerosol_vulcan_func(), ...
        albedo_func(), ...
        albedo_file_func(), ...
        albedo_library_func(), ...
        altitude_func(), ...
        atm_z_grid_func(), ...
        atmosphere_file_func(), ...
        bpdf_tsant_u10_func(), ...
        bdrf_ambrals_func(), ...
        bdrf_ambrals_file_func(), ...
        brdf_ambrals_hotspot_func(), ...
        brdf_cam_func(), ...
        brdf_cam_solar_wind_func(), ...
        brdf_hapke_func(), ...
        brdf_hapke_file_func(), ...
        brdf_rpv_func(), ...
        brdf_rpv_file_func(), ...
        brdf_rpv_library_func(), ...
        brdf_rpv_type_func(), ...
        ck_lowtran_absorption_func(), ...
        cloud_fraction_file_func(), ...
        cloud_overlap_func(), ...
        cloudcover_func(), ...
        crs_file_func(), ...
        crs_model_func(), ...
        data_files_path_func(), ...
        day_of_year_func(), ...
        deltam_func(), ...
        disort_intcor_func(), ...
        earth_radius_func(), ...
        filter_function_file_func(), ...
        flourescence_func(), ...
        flourescence_file_func(), ...
        heating_rate_func(), ...
        ic_file_func(), ...
        ic_fu_func(), ...
        ic_habit_func(), ...
        ic_habit_yang2013_func(), ...
        ic_properties_func(), ...
        include_func(), ...
        interpret_as_level_func(), ...
        isotropic_source_toa_func(), ...
        latitude_func(), ...
        longitude_func(), ...
        mc_azimuth_old_func(), ...
        mc_backward_func(), ...
        mc_backward_increment_func(), ...
        mc_backward_output_func(), ...
        mc_backward_writeback_func(), ...
        mc_basename_func(), ...
        mc_boxairmass_func(), ...
        mc_escape_func(), ...
        mc_forward_output_func(), ...
        mc_maxscatters_func(), ...
        mc_minphotons_func(), ...
        mc_minscatters_func(), ...
        mc_nca_func(), ...
        mc_photons_func(), ...
        mc_photons_file_func(), ...
        mc_polarisation_func(), ...
        mc_rad_alpha_func(), ...
        mc_randomseed_func(), ...
        mc_sensordirection_func(), ...
        mc_spectral_is_func(), ...
        mc_spherical_func(), ...
        mc_surface_reflectalways_func(), ...
        mc_vroom_func(), ...
        mixing_ratio_func() ...
        mol_abs_param_func(), ...
        mol_file_func(), ...
        mol_modify_func(), ...
        mol_tau_file_func(), ...
        n02_column_du_func(), ...
        n02_column_moleccm_2_func(), ...
        no_absorption_func(), ...
        no_scattering_func(), ...
        number_of_streams_func(), ...
        output_format_func(), ...
        output_process_func(), ...
        output_quantity_func(), ...
        output_user_func(), ...
    };
end
