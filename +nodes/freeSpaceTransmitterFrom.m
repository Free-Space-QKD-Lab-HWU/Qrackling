function fs_tx = freeSpaceTransmitterFrom(options)
    arguments
        options.Satellite nodes.Satellite
        options.Ground_Station nodes.Ground_Station
    end

    opts = fieldnames(options);
    if 0 == numel(opts)
        error("Must supply either a Satellite or Ground_Station")
    end

    if contains(opts, "Satellite")
        % FIX: this should be extended to cameras so that we can use this for
        % the beacon model as well
        assert(~isempty(options.Satellite.Source), [ ...
            'Supplied satellite, { ', inputname(2), ' } does not have a ', ...
            'source, can not make a receiver']);
            location = nodes.Located_Object();
            location = location.SetPosition( ...
                'Latitude', options.Satellite.Latitude, ...
                'Longitude', options.Satellite.Longitude, ...
                'Altitude', options.Satellite.Altitude);
            fs_tx = nodes.FreeSpaceTransmitter( ...
                options.Satellite.Source, ...
                options.Satellite.Telescope, ...
                location, ...
                timestamps = options.Satellite.Times);
        return
    end

    if contains(opts, "Ground_Station")
        assert(~isempty(options.Ground_Station.Source), [ ...
            'Supplied ground station, { ', inputname(2), ' } does not ', ...
            'have a source, can not make a receiver']);
            location = nodes.Located_Object();
            location = location.SetPosition( ...
                'Latitude', options.Ground_Station.Latitude, ...
                'Longitude', options.Ground_Station.Longitude, ...
                'Altitude', options.Ground_Station.Altitude);
            fs_tx = nodes.FreeSpaceTransmitter( ...
                options.Ground_Station.Source, ...
                options.Ground_Station.Telescope, ...
                location );
        return
    end

end
